= wp-capistrano

Capistrano receipe for WordPress

== Usage

 gem install wp-capistrano
 cd /path/to/wordpress/wp-content
 wpcapify .
 vim lib/config.yml
 cap setup # once
 cap deploy

Configuration options:

[application.repository] The repository that contains wp-content
[wordpress.repository]   By default, it uses our GitHub mirror
[wordpress.version]      A git tree-ish, which can be a branch name, tag, or a commit hash (e.g. v3.0.1)
[deploy.*]               These names are used when doing cap deploy when deploying to non-default environments (i.e. cap production deploy)
[deploy.*.default]       Set this to true to make this the default target
[deploy.*.ssh_user]      The deploy user (who should have write access to +path+ on the remote machine)
[deploy.*.ssh_domain]    The host where the site lives
[deploy.*.path]          The path on the remote machine
[deploy.*.vhost]         The HTTP hostname - sets WP_HOME and WP_SITEURL
[deploy.*.database.*]    All the database settings (name, user, host, password)

Before you run <tt>cap setup</tt> or <tt>cap deploy</tt>, you should ensure the path on the remote machine exists and is chmodded such that the deploy user can write to it.

To deploy to production rather than staging, for instance:

 cap production deploy

== Automagic features

=== SASS

If there exists wp-content/themes/*/*/sass_output.php it will be executed (from that directory) and its contents will be placed in sass_output.css. Then ../style.css will be sedded to s/\.php/\.css/, and both will be uploaded to the appropriate places.

sass_output.php can be found in wp-generate's theme generator. It is very handy for development, but less server load is more good, so we "cache" it in this way.

=== htaccess

Uploads ./htaccess to .htaccess if it exists.

=== wp-content/uploads

Uploads uploads directory at setup time if it exists, and ensures it's shared across releases. (TODO: Make this optional like shared-plugins)

=== Initial database dump

If there's a database dump at data/dump.sql.gz it uploads that at setup time and puts it into the database. (TODO: replace this feature with a task that takes the current database and uploads that)

=== Fixing plugins

- Makes cforms work without extra effort

=== Modules

Modules do things which can't be automagically divined:
- plugin-install
  - allows end-users to install plugins
- shared-plugins
  - keeps plugins in a shared directory (for use with plugin-install - stops plugins being lost when deploying)
- wp-super-cache
  - WP Super Cache is set up by default, and could be enabled in any release by chmodding wp-content/cache and wp-content/wp-cache-config.php appropriately and setting the WP_CACHE option to true, but this module does that for you

== wp-generate

wp-capistrano can be used with wp-generate by doing the following:

 gem install wp-generate
 cd wp-content
 wp-generate capify

Which creates Capfile and lib/config.yml.

== Credits

Code inspired by: http://github.com/jestro/wordpress-capistrano

== Author

* Tom Adams <tom@thedextrousweb.com>

== Copyright

Copyright Â© 2010 The Dextrous Web. See LICENCE for details.
